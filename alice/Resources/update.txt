using Alice.IO;
using Alice.Net;
using Alice.Regex;
using Alice.Console;
using Alice.Security;
using Alice.Diagnostics;
using Alice.Environment;

const string update_get_api = "https://api.wsoft.ws/download/detail?id={0}";
const download_url = "https://download.wsoft.ws/{0}/Download";

// OS名とアーキテクチャ名から、該当するバイナリのダウンロードIDを取得します
// os = OS名。Windows,Linux,OSXのいずれか
// arch = アーキテクチャ名。x64,x86,ARM32,ARM64のいずれか
// return = 該当するバイナリが見つかった場合はID、それ以外の場合は空文字列
string GetDownloadId(string os, string arch)
{
    switch(os)
    {
        case "Windows":
        {
            switch(arch)
            {
                case "x64":
                {
                    return "WS330";
                }
                case "x86":
                {
                    return "WS331";
                }
                case "ARM64":
                {
                    return "WS332";
                }
                case "ARM32":
                {
                    return "WS333";
                }
                default:
                {
                    return "";
                }
            }
            break;
        }
        case "OSX":
        {
            switch(arch)
            {
                case "x64":
                {
                    return "WS320";
                }
                case "ARM64":
                {
                    return "WS321";
                }
                default:
                {
                    return "";
                }
            }
            break;
        }
        case "Linux":
        {
            switch(arch)
            {
                case "x64":
                {
                    return "WS310";
                }
                case "ARM32":
                {
                    return "WS311";
                }
                case "ARM64":
                {
                    return "WS312";
                }
                default:
                {
                    return "";
                }
            }
            break;
        }
        default:
        {
            return "";
        }
    }

}

string GetDownloadData(string download_id)
{
    string update_url = update_get_api.format(download_id);
    write($"{update_url} から最新情報を取得しています...");
    string result = "";
    try
    {
        result = web_download_text(update_url);
    }catch
    {
        print("失敗");
        env_Exit(1);
    }
    print("完了");
    return result;
}

bool CheckFound(string data)
{
    return GetValue(data, "Status") == "Found";
}

string GetValue(string json, string key)
{
    var kv = regex_match(json,$'"{key}":"(.*?)"').split(":");

    if(kv.length > 1)
    {
        string r = kv[1];
        return r.SubString(1, r.Length - 2);
    }
    return "";
}

string GetNewlyVersion(string data)
{
    return GetValue(data, "Version");
}
string GetFileSize(string data)
{
    return GetValue(data, "FileSize");
}
string GetTitle(string data)
{
    return GetValue(data, "Title");
}

bool CompareVersion(string new, string now)
{
    var news = new.Split(".");
    var nows = now.Split(".");
    if(news.Length != nows.Length)
    {
        return true;
    }
    for(var i = 0; i < news.Length; i++)
    {
        string n = news[i];
        string m = nows[i];
        try
        {
            if(m.Convert(number) > n.Convert(number))
            {
                return false;
            }
        }catch{}
    }
    return true;
}

bool VerifyCheckSum(bytes data, string sum)
{
    string checksum = sha512_getHash(data).ToBase64();
    sum = sum.Trim();
    return checksum == sum;
}

bool AskYN(string message)
{
    write($"{message} [Y/n]");

    string ans = Console_ReadKey().ToUpperInvariant();
    print();

    if(ans == "Y")
    {
        return true;
    }
    else if(ans == "N")
    {
        return false;
    }
    else
    {
        return AskYN(message);
    }
}

string platform = env_impl_target();
string arch = env_impl_architecture();

string download_id = GetDownloadId(platform, arch);

if(download_id == null)
{
    print("このプラットフォームでは更新はサポートされていません");
    return;
}

string data = GetDownloadData(download_id);

write("最新情報を読み込んでいます...");
string now_version = env_impl_version();
string new_version = GetNewlyVersion(data);
string fileSize = GetFileSize(data);
string title = GetTitle(data);

bool force = env_commandLineArgs().Contains("force");
bool check = env_commandLineArgs().Contains("check");
bool need = CompareVersion(new_version, now_version);
print("完了");

print();

if(need || force)
{
    print("以下の更新が使用可能です");
    print($"- {title} {now_version} -> {new_version} [{fileSize}]");
}
else
{
    print("現在使用可能な更新はありません");
    return;
}
print();
bool need_new = (need || force) && !check;

if(need_new)
{
    print($"更新を行うには {fileSize} のファイルをダウンロードする必要があります");

    if(!AskYN("更新しますか？"))
    {
        print("更新はユーザーによって取り消されました");
        return;
    }
    print();
    bytes? bin = null;
    try
    {
        string url = download_url.format(download_id);
        write($"{url} から更新をダウンロードしています...");
        bin = web_download_data(url);
        print("完了");
    }
    catch(e)
    {
        print("失敗");
        print("更新のダウンロードに失敗しました。更新は行われませんでした。");
        print($"情報: {e.Message}");
        env_Exit(1);
    }
    
    write("ファイルを検証しています...");
    bool verify = VerifyCheckSum(bin, GetValue(data, "Hash"));
    print("完了");
    if(!verify)
    {
        print("ファイルの検証に失敗しました。更新は行われませんでした。");
        env_Exit(1);
    }

    string fileName = env_processPath();
    string tmpFile = fileName + ".old";

    write("ファイルをバックアップしています...");
    print();
    file_delete(tmpFile);
    file_move(fileName, tmpFile);
    write("完了");

    write("ファイルを書き込んでいます...");
    file_write_data(fileName, bin);
    print("完了");

    print("更新が完了しました");
    print($"{tmpFile} にバックアップがあります");
    if(platform != "Windows")
    {
        print("最後に次のコマンドを実行してください");
        print($" chmod +x {fileName}");
    }
}
